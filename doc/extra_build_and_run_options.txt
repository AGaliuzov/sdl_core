* Introduction
  ================
  smartDeviceLinkCore is an application which manages the transport, connection and communication between a head unit and mobile device.

* OS and Hardware
  =========
  Ubuntu 12.04.01 LTS 32-bit OS on the PC with USB-dongle
  Application has been tested using 2 types of USB-dongle:
  D-Link DBT-122
  STLab B-121mini

1) If You built configuration with tests (see 2.3 above), then You can run all project tests and see overall result with:
    make test
   
2). For creating the doxygen documentation run:
    make doxygen

3) To make snapshot you can run:
    make pasa-tarbal
   Note: more information about snapshot you can find: https://adc.luxoft.com/confluence/pages/viewpage.action?pageId=267749397

4) To make 3rd-party libs (logger, websocket, etc...) you can run:
    make 3rd_party
    sudo make install-3rd_party 
   Note: more info you can find: https://adc.luxoft.com/confluence/display/APPLINK/2014/06/10/3rd+party+libs+build

5) You can manage those environment flags for different build configuration:
    OS_TYPE: LINUX, QNX - target OS for executing smartDeviceLinkCore
    DEBUG: ON, OFF- add debug information
    HMI_TYPE: HTML5, QML2, QML1, NONE - type of HMI
    MEDIA_MODE: EXTENDED_MEDIA, DEFAULT_MEDIA - using extended or default media mode
    HMI_ADAPTER: MESSAGEBROKER, DBUS, MQUEUE - type of transport to use
    ENABLE_LOG: LOG_ON, LOG_OFF - switch on or switch off logging 
    Note: Sheldued build of all possible configurations you can find there http://172.30.18.18:8080/job/main_sdl_mc/
    Note: Example ( build for QNX without logging for release with Web HMI):
            "$ export OS_TYPE=LINUX"
            "$ export DEBUG=OFF"
            "$ export HMI_TYPE=HTML5"
            "$ cmake ../applink"
            "$ make install"


6) Additional cmake flags:
  1: EXTENDED_POLICY_FLAG
      By default it is OFF.
      Build with specific features and extended functionality
        Note: Policy should not be delivered to GENIVI

  2: EXTENDED_MEDIA_MODE
      By default it is OFF.
      Turn on and off extended Madia Manager features relates to PulseAudio A2DP and GStreamer

  3: CMAKE_BUILD_TYPE
      By default it is Debug.
      Choose the type of build. Options are: None, Debug, Release, RelWithDebInfo, MinSizeRel
      For release build use "-D CMAKE_BUILD_TYPE=Release"
        Note: For QNX+QtHMI build flag "-DCMAKE_BUILD_TYPE=Release" is plainly required

7) To configure  project for eclipse support use:
    cmake -G "Eclipse CDT4 - Unix Makefiles" <PATH_TO_SRC>  

8) Setup environment:
    Read the built-in setup environment help ("./setup_env.sh --help")

9) Colorized logs:
  9.1. Make sure grc is installed:
    $ sudo apt-get install grc

  9.2. Copy the config files from the grc/ directory into ~/.grc/ directory:
    $ mkdir ~/.grc
    $ cp grc/* ~/.grc/

  9.3. Add an alias to your shell's config (usually, ~/.bashrc or ~/.zshrc):
    $ alias grca='grc -es --colour=auto'

  Either restart the shell session or source the edited file:
    $ source ~/.bashrc
    or
    $ source ~/.zshrc

  9.4. Start the smartDeviceLink core with the following command:
    $ grca ./smartDeviceLinkCore

9) To build SDL with MME support (iPhone connection over USB) unpack iap archives from src/thirdPartyLibs:
                # tar -xjf iap.build.tar.bz2 -C $QNX_TARGET
                # tar -xjf iap.armv7-qnx.runtime.tar.bz2 -C $QNX_TARGET/armle-v7
                Note: MME is supported only for ARMv7 platform
11) Build SDL for deploying on target
  Note: You should compile SDL on Windows with Momentics studio
  
  11.1 After successful compilation you should login on target by TELNET and execute:
        # mount â€“uw /fs/mp
  11.2 Copy files on target:
        bin\armle-v7\release\SmartDeviceLink ==> /fs/mp/apps/SmartDeviceLink
        dll\armle-v7\release\* ==> /fs/mp/apps/usr/lib/
        src\appMain\hmi_capabilities.json => /fs/mp/etc/AppLink/hmi_capabilities.json
        src\appMain\sdl_preloaded_pt.json => /fs/mp/etc/AppLink/sdl_preloaded_pt.json
        src\appMain\policy_usb.cfg => /fs/mp/etc/AppLink/policy_usb.cfg
        src\appMain\policy.cfg => /fs/mp/etc/AppLink/policy.cfg
        src\appMain\policy.ini => /fs/mp/etc/AppLink/policy.ini
        src\appMain\policy.sql => /fs/mp/etc/AppLink/policy.sql
        src\appMain\smartDeviceLink.ini => /fs/mp/etc/AppLink/smartDeviceLink.ini
        src\appMain\init_policy.sh => /fs/mp/etc/AppLink/init_policy.sh
        src\appMain\init_policy_pasa.sh => /fs/mp/etc/AppLink/init_policy_pasa.sh
  11.3 Execute
        # sync
        # sync
  11.4 Chech if startup skript runs SDL.
  11.5 If you want to collect log, change startul SDL line
        from:
             on -C0 -p 12 SmartDeviceLink > /dev/null &
        to
            on -C0 -p 12 SmartDeviceLink >  /fs/rwdata/{PATH_TO_FILE}&
  11.5 Restart target
12) Troubleshooting:
	1. If when you run ./smartDeviceLink you see error:
		Error with reading shared libraries: liblog4cxx.so.10
	   Pllese do:
		$ sudo rm /etc/ld.so.cache
		$ sudo sudo ldconfig
	   And try run SDL again.

